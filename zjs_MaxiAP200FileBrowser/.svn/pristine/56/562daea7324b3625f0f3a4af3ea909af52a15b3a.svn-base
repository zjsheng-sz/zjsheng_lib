//
//  SandboxBrowser.swift
//  SandboxBrowser
//
//  Created by Joe on 2017/8/25.
//  Copyright © 2017年 Joe. All rights reserved.
//

import Foundation
import UIKit
import SVProgressHUD


public enum FileType: String {
    case directory = "directory"
    case gif = "gif"
    case jpg = "jpg"
    case png = "png"
    case jpeg = "jpeg"
    case json = "json"
    case pdf = "pdf"
    case plist = "plist"
    case file = "file"
    case sqlite = "sqlite"
    case log = "log"
    case txt = "txt"
    case xml = "xml"
    case ini = "ini"
    
    var fileName: String {
        switch self {
        case .directory: return "directory"
        case .jpg, .pdf, .gif, .jpeg: return "image"
        case .plist: return "plist"
        case .sqlite: return "sqlite"
        case .log: return "log"
//        case .txt: return "txt"
//        case .xml: return "xml"
        default: return "file"
        }
    }
}

public struct FileItem {
    public var name: String
    public var path: String
    public var type: FileType
    
    public var vehicle:( isVehicle:Bool, fatherDirector:String?){
        
        let documentPath:String = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true).first!

        guard path.hasPrefix(documentPath) else { return (false,nil) }
        
        //洲系下目录
        let componentes = path.components(separatedBy: "/")
        let fatherDirector = componentes[componentes.count - 2]
        
        if ContinentsArr.contains(name) && fatherDirector == "Vehicle" {
            return (false, fatherDirector)
        }
        
        if ContinentsArr.contains(fatherDirector) || fatherDirector == "Vehicle"{
            return (true, fatherDirector)
        }
        
        return (false,nil)
    }
    
    
    public var modificationDate: Date {
        do {
            let attr = try FileManager.default.attributesOfItem(atPath: path)
            return attr[FileAttributeKey.modificationDate] as? Date ?? Date()
        } catch {
            print(error)
            return Date()
        }
    }
    
    var image: UIImage {
        let bundle = Bundle(for: FileListViewController.self)
        let path = Bundle.main.path(forResource: "Resources", ofType: "bundle")
        let resBundle = Bundle(path: path!)!
        
        return UIImage(contentsOfFile: resBundle.path(forResource: type.fileName, ofType: "png")!)!
    }
}

public class SandboxBrowser: UINavigationController {
    
    var fileListVC: FileListViewController?
    
    open var didSelectFile: ((FileItem, FileListViewController) -> ())? {
        didSet {
            fileListVC?.didSelectFile = didSelectFile
        }
    }
    
    public convenience init() {
        #if IS_APPSTORE
            let url = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: "group.com.autel.maxiAP200");
        #else
            let url = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: "group.com.autel.maxiAP200.enterprise");
        #endif

        self.init(initialPath: url!)
    }
    
    public convenience init(initialPath: URL) {
        let fileListVC = FileListViewController(initialPath: initialPath)
        self.init(rootViewController: fileListVC)
        self.fileListVC = fileListVC
    }
}

public class FileListViewController: UIViewController {
    
    
    fileprivate struct Misc {
        static let cellIdentifier = "FileCell"
    }
    
    private lazy var tableView: UITableView = {
        
        let view = UITableView(frame: self.view.bounds)
        view.backgroundColor = .white
        view.delegate = self
        view.dataSource = self
        view.rowHeight = 70
        view.separatorInset = .zero
        let longPress = UILongPressGestureRecognizer(target: self, action: #selector(onLongPress(gesture:)))
        longPress.minimumPressDuration = 0.5
        view.addGestureRecognizer(longPress)
        
        
        let footerView = UIView()
        var footerFrame = self.view.frame
        footerView.backgroundColor = UIColor.red
        footerFrame.size.height = 70
        footerView.frame = footerFrame
        footerView.isUserInteractionEnabled = false
        
        view.tableFooterView = footerView;
        
        return view
    }()
    
    fileprivate var items: [FileItem] = [] {
        didSet {
            tableView.reloadData()
        }
    }
    
    var didSelectFile: ((FileItem, FileListViewController) -> ())?
    var initialPath: URL?
    
    
    
    convenience init(initialPath: URL) {
        self.init()
        
        self.initialPath = initialPath
        self.title = initialPath.lastPathComponent
    }
    
    override public func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = .white
        view.addSubview(tableView)
        
        loadPath(initialPath!.relativePath)
        
        navigationItem.rightBarButtonItem = UIBarButtonItem(
            title: "Close",
            style: .plain,
            target: self,
            action: #selector(close))
    }
    
    
    @objc func onLongPress(gesture: UILongPressGestureRecognizer) {
        
        let sheetController = UIAlertController.init(title: "提示", message: nil, preferredStyle: UIAlertControllerStyle.actionSheet);
        let cancelAction = UIAlertAction.init(title: "取消", style: .cancel, handler: nil)
        sheetController.addAction(cancelAction);
        
        let app:AppDelegate = UIApplication.shared.delegate as! AppDelegate

        let point = gesture.location(in: tableView)
        let indexPath = tableView.indexPathForRow(at: point)
    
        if indexPath == nil  {//空白：只有粘贴功能
            
            if app.sourcefileItem != nil{
                
                let pasteAction = UIAlertAction.init(title: "粘贴", style: UIAlertActionStyle.default) { (alertAction) in
                    
                    
                        let toPath = self.initialPath!.path + "/" + app.sourcefileItem!.name;
                    
                        if FileManager.default.fileExists(atPath: toPath) == false {
                            
                            do{
                                SVProgressHUD.show(withStatus: "正在复制")
                                try FileManager.default.copyItem(atPath: app.sourcefileItem!.path, toPath: toPath)
                                SVProgressHUD.showSuccess(withStatus: "复制成功")
                                self.loadPath(self.initialPath!.relativePath)
                                
                            }catch{
                                
                                SVProgressHUD.showError(withStatus: error.localizedDescription)
                                self.loadPath(self.initialPath!.relativePath)
                            }
                            
                        }else{

                            let replaceAlert = UIAlertController.init(title: "提示", message: "该文件已经存在，是否替换？", preferredStyle: .alert)
                            
                            let okAction = UIAlertAction.init(title: "确定", style: .default, handler: { (alertAction) in
                                
                                do{
                                    SVProgressHUD.show(withStatus: "正在删除原文件")
                                    try FileManager.default.removeItem(atPath:toPath)
                                    SVProgressHUD.showSuccess(withStatus: "删除成功")
                                    self.loadPath(self.initialPath!.relativePath)
                                    SVProgressHUD.show(withStatus: "正在复制")
                                    try FileManager.default.copyItem(atPath: app.sourcefileItem!.path, toPath: toPath)
                                    SVProgressHUD.showSuccess(withStatus: "复制成功")
                                    self.loadPath(self.initialPath!.relativePath)
                                    
                                }catch{
                                    
                                    SVProgressHUD.showError(withStatus: error.localizedDescription);
                                }
                            });
                            
                            let cancelAction = UIAlertAction.init(title: "取消", style: .cancel, handler: nil)
                            replaceAlert.addAction(okAction)
                            replaceAlert.addAction(cancelAction)
                            self.present(replaceAlert, animated: true, completion: nil);
 
                        }
                };
        
                sheetController.addAction(pasteAction);
                present(sheetController, animated: true, completion: nil)
            }

            
        }else{
            
            let item = items[indexPath!.row]
            
            let copyAction = UIAlertAction.init(title: "拷贝", style: UIAlertActionStyle.default) { (alertAction) in
                app.sourcefileItem = item
            };
            
            
            let deleteAction = UIAlertAction.init(title: "删除", style: UIAlertActionStyle.default) { (alertAction) in
                
                let deleteAlert = UIAlertController.init(title: "提示", message: "确定要删除？", preferredStyle: UIAlertControllerStyle.alert)
                
                let okAction = UIAlertAction.init(title: "确定", style: .default, handler: { (alertAction) in
                    do{
                        try FileManager.default.removeItem(atPath: item.path)
                        self.loadPath(self.initialPath!.relativePath)
                    }catch{
                        SVProgressHUD.showError(withStatus: error.localizedDescription);
                    }
                });
                let cancelAction = UIAlertAction.init(title: "取消", style: .cancel, handler: nil)
                self.present(deleteAlert, animated: true, completion: nil)
                
                
                deleteAlert.addAction(okAction)
                deleteAlert.addAction(cancelAction)
            };
            
            
            if item.vehicle.isVehicle{//车系目录：快捷支付、复制、删除
                
                let shareAction = UIAlertAction.init(title: "快捷导入到Ap200", style: UIAlertActionStyle.default) { (alertAction) in
                    
                    self.shareVehicle(item)
                };
                
                sheetController.addAction(shareAction);
                sheetController.addAction(copyAction);
                sheetController.addAction(deleteAction);

            }else{//其他目录：复制、删除
                
                sheetController.addAction(copyAction);
                sheetController.addAction(deleteAction);
            }
            
            present(sheetController, animated: true, completion: nil)
        }
        
    }

    
    @objc func close() {
        dismiss(animated: true, completion: nil)
    }

    
    func loadPath(_ path: String = "") {
        var filelist = [FileItem]()
        
        var paths: [String] = []
        
        do {
            paths = try FileManager.default.contentsOfDirectory(atPath: path)
            guard paths.count > 0 else { return }
        } catch {
            print(error.localizedDescription)
        }
        
        paths.filter { !$0.hasPrefix(".") }.forEach { subpath in
            var isDir: ObjCBool = ObjCBool(false)
            
            let fullpath = path.appending("/" + subpath)
            FileManager.default.fileExists(atPath: fullpath, isDirectory: &isDir)
            
            var pathExtension = URL(fileURLWithPath: fullpath).pathExtension.lowercased()
            if pathExtension.hasPrefix("sqlite") || pathExtension == "db" { pathExtension = "sqlite" }
            
            let filetype: FileType = isDir.boolValue ? .directory : FileType(rawValue: pathExtension) ?? .file
            let fileItem = FileItem(name: subpath, path: fullpath, type: filetype)
            filelist.append(fileItem)
        }
        items = filelist
    }
    
    
    
    
     func shareVehicle(_ item: FileItem) {
        
        let alertContoller = UIAlertController.init(title: "提示", message: "确定拷贝到共享目录？", preferredStyle: .alert)
        
        let sureAction = UIAlertAction.init(title: "确定", style: .default) { (action) in
            
            let shareRootUrl = FileManager.default.containerURL(forSecurityApplicationGroupIdentifier: "group.com.autel.maxiAP200")
            
            var vehicleUrl: URL?
            if item.vehicle.fatherDirector != "Vehicle" {
                vehicleUrl = shareRootUrl?.appendingPathComponent("MaxiApScan").appendingPathComponent("Vehicle").appendingPathComponent(item.vehicle.fatherDirector!).appendingPathComponent(item.name)
            }else{
                 vehicleUrl = shareRootUrl?.appendingPathComponent("MaxiApScan").appendingPathComponent("Vehicle").appendingPathComponent(item.name)
            }
            
            if FileManager.default.fileExists(atPath: vehicleUrl!.path){
                
                SVProgressHUD.show(withStatus: "正在删除原有车系资源")
                
                DispatchQueue.global().async {
                    do{
                        try  FileManager.default.removeItem(atPath:vehicleUrl!.path)
                        SVProgressHUD.showSuccess(withStatus: "删除成功")
                        SVProgressHUD.show(withStatus: "正在复制车系资源")
                        try FileManager.default.copyItem(atPath: item.path, toPath: vehicleUrl!.path);
                        SVProgressHUD.showSuccess(withStatus: "复制成功")

                    }catch{
                        DispatchQueue.main.async {
                            SVProgressHUD.showError(withStatus: error.localizedDescription);
                        }
                    }
                }
                
            }else{
                
                //copy文件夹到那个项目
                SVProgressHUD.show(withStatus: "正在复制车系资源")
                DispatchQueue.global().async {
                    do{
                        try FileManager.default.copyItem(atPath: item.path, toPath: vehicleUrl!.path);
                    }catch{
                        DispatchQueue.main.async {
                            SVProgressHUD.showError(withStatus: error.localizedDescription);
                        }
                    }
                    DispatchQueue.main.async {
                        SVProgressHUD.showSuccess(withStatus: "复制成功")
                    }
                }
            }
        }
        
        let cancelAciton = UIAlertAction.init(title: "取消", style: .cancel, handler: nil)
        alertContoller.addAction(sureAction)
        alertContoller.addAction(cancelAciton)
        
        self.present(alertContoller, animated: true, completion: nil)
    }

    
    func shareFile(_ filePath: String) {
        
        let controller = UIActivityViewController(
            activityItems: [NSURL(fileURLWithPath: filePath)],
            applicationActivities: nil)

        controller.excludedActivityTypes = [
            .postToTwitter, .postToFacebook, .postToTencentWeibo, .postToWeibo,
            .postToFlickr, .postToVimeo, .message, .mail, .addToReadingList,
            .print, .copyToPasteboard, .assignToContact, .saveToCameraRoll,
        ]

        if UIDevice.current.userInterfaceIdiom == .pad {
            controller.popoverPresentationController?.sourceView = view
            controller.popoverPresentationController?.sourceRect = CGRect(x: UIScreen.main.bounds.size.width * 0.5, y: UIScreen.main.bounds.size.height * 0.5, width: 10, height: 10)
        }
        self.present(controller, animated: true, completion: nil)
    }
}

class FileCell: UITableViewCell {
    
    override func layoutSubviews() {
        super.layoutSubviews()
        
        var imageFrame = imageView!.frame
        imageFrame.size.width = 55
        imageFrame.size.height = 55
        imageView?.frame = imageFrame
        imageView?.center.y = contentView.center.y
        
        var textLabelFrame = textLabel!.frame
        textLabelFrame.origin.x = imageFrame.maxX + 15
        textLabelFrame.origin.y = textLabelFrame.origin.y - 5
        textLabel?.frame = textLabelFrame
        
        var detailLabelFrame = detailTextLabel!.frame
        detailLabelFrame.origin.x = textLabelFrame.origin.x
        detailLabelFrame.origin.y = detailLabelFrame.origin.y + 5
        detailTextLabel?.frame = detailLabelFrame
    }
}

extension FileListViewController: UITableViewDelegate, UITableViewDataSource {
    public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return items.count
    }
    
    public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell = tableView.dequeueReusableCell(withIdentifier: Misc.cellIdentifier)
        if cell == nil { cell = FileCell(style: .subtitle, reuseIdentifier: Misc.cellIdentifier) }
        
        let item = items[indexPath.row]
        cell?.textLabel?.text = item.name
        cell?.imageView?.image = item.image
        cell?.detailTextLabel?.text = DateFormatter.localizedString(from: item.modificationDate,
                                                                    dateStyle: .medium,
                                                                    timeStyle: .medium)
        cell?.accessoryType = item.type == .directory ? .disclosureIndicator : .none

        
        return cell!
    }
    
    public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard indexPath.row < items.count else { return }
        
        tableView.deselectRow(at: indexPath, animated: true)
        
        let item = items[indexPath.row]
        
        switch item.type {
        case .directory:
            let sandbox = FileListViewController(initialPath: URL(fileURLWithPath: item.path))
            sandbox.didSelectFile = didSelectFile
            self.navigationController?.pushViewController(sandbox, animated: true)
        default:
            didSelectFile?(item, self)
            
            let detailVC = DetailViewController()
            detailVC.fileItem = item
            self.navigationController?.pushViewController(detailVC, animated: true)
            
            
        }
    }
    
    
}






