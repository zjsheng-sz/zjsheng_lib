#pragma once
#ifndef TTYInterface_H
#define TTYInterface_H
#include<stdio.h>      /*标准输入输出定义*/  
#include<stdlib.h>     /*标准函数库定义*/  
#include<unistd.h>     /*Unix 标准函数定义*/  
#include<sys/types.h>   
#include<sys/stat.h>     
#include<fcntl.h>      /*文件控制定义*/  
#include<termios.h>    /*PPSIX 终端控制定义*/  
#include<errno.h>      /*错误号定义*/  
#include<string.h>
#include<pthread.h>
#include "Binary.h"
#include "public.h"
#include "JniPublic.h"
using namespace JniPublic;

#include <sys/socket.h>
#include <linux/netlink.h>

struct uevent {
	const char *action;
	const char *path;
	const char *subsystem;
	const char *firmware;
	int major;
	int minor;
};


 class	CTTYSInterface
 {
 public:
	 /*-----------------------------------------------------------------------------
	 功    能：单例获取CTTYSInterface实例
	 参数说明：无
	 返 回 值：CTTYSInterface实例指针
	 说    明：静态m_pInstance(CTTYSInterface实例指针)
	 -----------------------------------------------------------------------------*/
	 static CTTYSInterface* GetInstance(std::string strTTYSPort="/dev/ttyUSB0");
	 /*-----------------------------------------------------------------------------
	 功    能：析构函数
	 参数说明：无
	 返 回 值：无
	 说    明：
	 -----------------------------------------------------------------------------*/
	 virtual ~CTTYSInterface();
	 /*-----------------------------------------------------------------------------
	 功    能：打开COM口，并设置COM口参数和端口状态
	 参数说明：无
	 返 回 值：成功返回TRUE,失败返回FALSE
	 说    明：无
	 -----------------------------------------------------------------------------*/
	 bool Init();
	 /*-----------------------------------------------------------------------------
	 功    能：关闭串口
	 参数说明：无
	 返 回 值：无
	 说    明：销毁 new TTYS同时将指针设为NULL.
	 -----------------------------------------------------------------------------*/
	 void Destroy();
	 /*-----------------------------------------------------------------------------
	 功    能：设置串口参数
	 参数说明：
				nBaudRate: 波特率(2400、4800、9600、115200(默认))
				nDataBits:数据位(7、8(默认))
				nParity:奇偶校验位('O'、'N'(默认)、'E');
				nStopBits:停止位(1(默认)、2)
				nFlow_Ctrl:数据流控制
	 返 回 值：无
	 说    明：初始化已经设置参数，这里是更改串口参数
	 -----------------------------------------------------------------------------*/
	 bool SetUart(int nBaudRate=115200, int nDataBits=8, char nParity='N', int nStopBits=1,int nFlow_Ctrl=0);

	 /*-----------------------------------------------------------------------------
	 功    能：接受和发送数据
	 参数说明：
				binSendCmd:发送的命令
	 返 回 值：是否成功
	 说    明：无
	 -----------------------------------------------------------------------------*/
	 bool Send(const CBinary &binSendCmd);
	 /*-----------------------------------------------------------------------------

	 /*-----------------------------------------------------------------------------
	 功    能：接受和发送数据
	 参数说明：
				nReturnLen是应该返回的长度,读到这么多就返回,默认是-1即读数据直到超时为止
	 返 回 值：返回的数据
	 说    明：无
	 -----------------------------------------------------------------------------*/
	 CBinary Receive(int nReturnLen = -1);
	 /*-----------------------------------------------------------------------------

	 /*-----------------------------------------------------------------------------
	 功    能：接受和发送数据
	 参数说明：
				binSendCmd:发送的命令
				nReturnLen:是应该返回的长度,读到这么多就返回,默认是-1即读数据直到超时为止
	 返 回 值：返回的数据
	 说    明：无
	 -----------------------------------------------------------------------------*/
	 CBinary SendReceive(const CBinary &binSendCmd, int nReturnLen = -1);
	 /*-----------------------------------------------------------------------------

	 功    能：设置读超时时间
	 参数说明：
				nTimeOutSec：没有接收到字节数但是时间到即返回(单位 s)
				nTimeOutUsec：没有接收到字节数但是时间到即返回(单位 us)
	 返 回 值：无
	 说    明：
	 -----------------------------------------------------------------------------*/
	 void SetCommTime(int nTimeOutSec,int nTimeOutUsec);
 	 /*-----------------------------------------------------------------------------
	 功    能：获取超时时间
	 参数说明：
				nTimeOutSec：没有接收到字节数但是时间到即返回(单位 s)
				nTimeOutUsec：没有接收到字节数但是时间到即返回(单位 us)
	 返 回 值：无
	 说    明：
	 -----------------------------------------------------------------------------*/
	 void GetCommTime(int &nTimeOutSec,int &nTimeOutUsec);
	 /*-----------------------------------------------------------------------------
	 * 名称：    Get_BautRate 
	 * 功能：    获取波特率 
	 * 入口参数：无
	 * 出口参数：当前波特率 
	 -----------------------------------------------------------------------------*/
	 int GetBautRate(void);
	 /*-----------------------------------------------------------------------------
	 功    能：打开接口
	 参数说明：端口地址
	 返 回 值：打开成功true,失败false
	 说    明：当设备在使用中被拔插，由于设备文件是根据设备动态生成的，所以原打开的
	 文件描述符将不能使用,监控线程检测到被拔掉后内部重新打开
	 -----------------------------------------------------------------------------*/
	 bool Reopen();
	  /*-----------------------------------------------------------------------------
	 功    能：关闭接口
	 参数说明：无
	 返 回 值：无
	 说    明：当判断IsOpen返回-2时使用
	 -----------------------------------------------------------------------------*/
//	 void Close();
	  /*-----------------------------------------------------------------------------
	 功    能：判断接口是否打开
	 参数说明：无
	 返 回 值：已经打开可以使用1,已经打开不可使用0，没打开-1,其他-2
	 说    明：返回0说明。原来打开设备，但是由于设备掉电，设备节点文件更改所以不能使用，需要重新打开
	 由监控线程检测设备是否被拔出
	 -----------------------------------------------------------------------------*/
	 int IsOpen();
  private:
	/*-----------------------------------------------------------------------------
	功    能：构造函数
	参数说明：端口地址
	返 回 值：无
	说    明：对变量进行初始化
	-----------------------------------------------------------------------------*/
	CTTYSInterface(std::string strTTYSPort);
 private:
	 int m_nfd;
	 string m_strTTYSPort;	//串口地址名称	 
	 int m_nBautRate;
	 int m_nTimeOutSec;
	 int m_nTimeOutUSec;
	 bool m_bOpen;				//是否成功打开
 };

#endif